cmdhistory=["(foo)" "foo" "(foo)" "foo" "(println \\"bla\\")" "(foo)" "(+ 1 2)" "(+ 1 3)" "insert (djdsk dssd 333 33 33 77)" "(defn insert [product_name description year price exrate]\\r\\n  (mc/insert db \\"products\\" {\:name product_name, \:description description, \:year year, \:price price, \:exrate exrate }))" "(defn insert [product_name description year price exrate]\\r\\n     (mc/insert db \\"products\\" {\:name bla, \:description opis, \:year 2013, \:price 150, \:exrate 44\\n                               }))" "(defn insert [product_name description year price exrate]\\r\\n     (mc/insert db \\"products\\" {\:name \\"dd\\", \:description \\"opis\\", \:year 2013, \:price 67, \:exrate 89 }))" "(defn insert [product_name description year price exrate]\\r\\n     (mc/insert db \\"products\\" {\:name product_name, \:description description, \:year year, \:price price, \:exrate exrate }))" "(insert \\"bla\\" \\"bla2\\" \\"bla3\\" \\"bla4\\" \\"bla5\\")" "\\r\\n(defn insertproduct [product_name description year price exrate]\\r\\n  (do (db/insert product_name description year price exrate))\\r\\n  )" "(insertproduct \\"bla\\" \\"bla2\\" \\"bla3\\" \\"bla4\\" \\"bla5\\")" "(POST \\"/insertproduct\\" [product_name description year price exrate] (insert product_name description year price exrate))" "(defn read-all-products []\\r\\n    (mc/find-maps db \\"products\\"))" "read-all-products([])" "read-all-products" "println \\"Hello\\"" "println" "println read-all-products" "(defn read-all-products []\\r\\n    (mc/find-maps db \\"products\\"))" "read-all-products" "(defn read-all-products [table]\\r\\n    (mc/find-maps db table))" "read-all-products" "read-all-products[\\"products\\"]" "(defn read-all-products []\\r\\n    (mc/find-maps db \\"products\\"))" "read-all-products" "read-all-products[]" "(defn get-all [table]\\r\\n  (mc/find-maps db table))" "(get-all \\"products\\")" "(defn read-all-products []\\r\\n    (mc/find-maps db \\"products\\"))" "(read-all-products)" "(defn get-products []\\r\\n  (db/read-all-products))" "(get-products)" "\\r\\n(defn delete-pr [product_id]\\r\\n  (mc/remove-by-id db \\"products\\" product_id))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(defn delete-product [product_id]\\r\\n  (do\\r\\n    (db/delete-pr product_id )\\r\\n    (redirect \\"/products\\")))" "(delete-product \\"55fef6ed2a234c00c0b71f5f\\")" "\\r\\n(defn delete-product [product_id]\\r\\n  (do\\r\\n    (db/delete-pr product_id)))" "(delete-product ObjectId(\\"55fef6ed2a234c00c0b71f5f\\"))" "(delete-product \\"55fef6ed2a234c00c0b71f5f\\")" "(defn delete-pr [product_id]\\r\\n   (let [product_id (ObjectId.)]\\r\\n  (mc/remove-by-id db \\"products\\" product_id)))" "(delete-pr ObjectId(\\"55fef6ed2a234c00c0b71f5f\\"))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(defn delete-pr [product_id]\\r\\n  \\"Delete product from database.\\"\\r\\n  (let [id1 (Integer/valueOf product_id)]\\r\\n  (mc/remove-by-id \:products {\:_id id1})))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(delete-pr 55fef6ed2a234c00c0b71f5f)" "(defn delete-pr [product_id]\\r\\n  \\"Delete product from database.\\"\\r\\n  (mc/remove-by-id \:products {\:_id product_id}))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(defn delete-pr [product_id]\\r\\n  \\"Delete product from database.\\"\\r\\n  (mc/update db \\"products\\" {$pull  {\:_id (ObjectId. product_id)}}))" "(delete-pr ObjectId(\\"55fef6ed2a234c00c0b71f5f\\"))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(defn delete-pr [product_id]\\r\\n  \\"Delete product from database.\\"\\r\\n  (mc/remove-by-id db \\"products\\" {\:_id (ObjectId. product_id)}))" "(delete-pr (ObjectId(\\"55fef6ed2a234c00c0b71f5f\\")))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(defn delete-pr [product_id]\\r\\n  \\"Delete product from database.\\"\\r\\n  (mc/remove db \\"products\\" {\:_id (ObjectId. product_id)}))" "(delete-pr \\"55fef6ed2a234c00c0b71f5f\\")" "(defn get-currency-rate []\\r\\n\\t (\:body(client/get (\\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\")\\r\\n                         {\:as \:json} ))\\r\\n               )" "(get-currency-rate)" "(get-currency-rate ())" "(get-currency-rate [])" "(defn get-currency []\\r\\n(client/put \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json}))" "(get-currency)" "(defn get-currency-rate []\\r\\n\\t (\:body(client/get (\\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\")\\r\\n                         {\:as \:json} ))\\r\\n               )" "(get-currency)" "(get-currency-rate)" "(defn get-currency-rate []\\r\\n\\t (client/get (\\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\")\\r\\n                         {\:as \:json} )\\r\\n               )" "(get-currency-rate)" "(defn get-currency-rate []\\r\\n\\t( let [quotes(((client/get (\\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\")\\r\\n                         {\:as \:json}\:headers) \:body) \:quotes)] )\\r\\n               )" "(get-currency-rate)" "(defn get-currency []\\r\\n(client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json}))" "(get-currency)" "(defn get-currency []\\r\\n(let [source-body(((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:source)]))" "(get-currency)" "(defn get-currency []\\r\\n(client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json}))" "(get-currency)" "(defn get-currency []\\r\\n(let [source-body(((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:source)]))" "(get-currency)" "(defn get-currency []\\r\\n(client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json}))" "(get-currency)" "(defn get-currency []\\r\\n(client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json}))" "(get-currency)" "(defn get-currency-rate []\\r\\n(let [source-body(((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json}\:headers) \:body) \:source)]))" "(get-currency-rate)" "(get-currency)" "(defn get-currency-rate []\\r\\n(let [source-body((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:body) \:source)]))" "(get-currency-rate)" "(defn get-currency-rate []\\r\\n((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:body) \:source))" "(get-currency-rate)" "(defn get-currency-rate []\\r\\n((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:body) \:source))" "(get-currency-rate)" "(defn get-currency-rate []\\r\\n(((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:source))" "(get-currency-rate)" "\\r\\n(defn get-currency-rate []\\r\\n((((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=2010-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(get-currency-rate)" "(defn insertproduct [product_name description year price exrate]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (read-string (get-currency-rate)))\\r\\n     (redirect \\"index\#portfolio\\")\\r\\n    ) \\r\\n  )" "(insertproduct (\\"bla\\" \\"bla\\" \\"2009\\" \\"678\\" \\"tr\\"))" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate))\\r\\n     (redirect \\"index\#portfolio\\")\\r\\n    ) \\r\\n  )" "(insertproduct (\\"pr\\" \\"po\\" \\"445\\" \\"900\\"))" "(insertproduct \\"pr\\" \\"po\\" \\"445\\" \\"900\\")" "(insertproduct \\"pr\\" \\"po\\" \\"2010\\" \\"900\\")" "(insertproduct \\"pr\\" \\"po\\" \\"2004\\" \\"900\\")" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year))\\r\\n     (redirect \\"index\#portfolio\\")\\r\\n    ) \\r\\n  )" "(insertproduct \\"proba\\" \\"proba\\" \\"2003\\" \\"700\\")" "\\r\\n(defn get-currency-rate [year]\\r\\n((((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=\\" year \\"-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(get-currency-rate \\"2010\\")" "\\r\\n(defn get-currency-rate [year]\\r\\n((((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=\\"year\\"-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(get-currency-rate \\"2010\\")" "(defn get-currency-rate [year]\\r\\n((((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=\\"(str year)\\"-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(get-currency-rate \\"2010\\")" "(defn get-currency-rate [year]\\r\\n((((client/get \\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=\\"{year}\\"-01-01&currencies\=EUR&format\=1\\"\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(defn get-currency-rate [year]\\r\\n((((client/get (str\\"http\://apilayer.net/api/historical?access_key\=8163e1c2d806f1299896dcb5f114c171&date\=\\" year \\"-01-01&currencies\=EUR&format\=1\\")\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(get-currency-rate \\"2010\\")" "(get-currency-rate \\"2002\\")" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year))\\r\\n     (redirect \\"index\#portfolio\\")\\r\\n    ) \\r\\n  )" "(insertproduct \\"proiz\\" \\"opis\\" \\"2002\\" \\"3000\\")" "\\r\\n(defn get-currency-rate [year]\\r\\n((((client/get (str \\"http\://apilayer.net/api/historical?access_key\=\\" (get-api-key) \\"&date\=\\" year \\"-01-01&currencies\=EUR&format\=1\\")\\r\\n  {\:form-params \\"body\\"\\r\\n \:content-type \:json\\r\\n  \:throw-exceptions false\\r\\n  \:as \:json} \:headers) \:body) \:quotes) \:USDEUR))" "(get-currency-rate \\"2010\\")" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year))\\r\\n     (redirect \\"index\#portfolio\\")\\r\\n    ) \\r\\n  )" "(insertproduct \\"d\\" \\"ss\\" \\"2010\\" \\"333\\")" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year))\\r\\n    ) \\r\\n  )" "(insertproduct \\"d\\" \\"ss\\" \\"2010\\" \\"333\\")" "(defn search-product [product-name]\\r\\n  (mc/find-one-as-map db \\"products\\" {\:name product-name}))" "(search-product \\"pr\\")" "(defn return-products-by-name [product-name]\\r\\n   (create-root-element(db/search-product product-name)))" "(return-products-by-name \\"pr\\")" "(defn get-eur-price [usdprice currrate]\\r\\n  (* usdprice currrate)\\r\\n  )" "(get-eur-price 98 0.9)" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year) (get-eur-price (get-currency-rate year) price))\\r\\n     (redirect \\"/products\#productslist\\")\\r\\n    ) \\r\\n  )" "(insertproduct \\"zz\\" \\"ff\\" 2010 99)" "(insertproduct \\"zz\\" \\"ff\\" \\"2010\\" \\"99\\")" "(defn get-eur-price [usdprice currrate]\\r\\n  (read-string(* usdprice currrate))\\r\\n  )" "(get-eur-price 77 2)" "(defn get-eur-price [year usdprice]\\r\\n (let [res (get-currency-rate year)]\\r\\n  (* usdprice res)\\r\\n  ))" "(get-eur-price 2010 30)" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year) (get-eur-price year price))\\r\\n     (redirect \\"/products\#productslist\\")\\r\\n    ) \\r\\n  )" "(insertproduct \\"sd\\" \\"sd\\" 2010 22)" "(insertproduct \\"sd\\" \\"sd\\" \\"2010\\" \\"22\\")" "(insertproduct \\"sd\\" \\"sd\\" 2010 22)" "(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year) (get-eur-price year price))\\r\\n    \\r\\n    ) \\r\\n  )" "(insertproduct \\"sa\\" \\"saa\\" 2010 332)" "\\r\\n(defn insertproduct [product_name description year price]\\r\\n  (do (db/insert product_name description (read-string year) (read-string price) (get-currency-rate year))\\r\\n    \\r\\n    ) \\r\\n  )" "(insertproduct \\"as\\" \\"sas\\" 2010 32)" "(defn update-pr [product_id]\\r\\n  (mc/update db \\"products\\" {\:_id (ObjectId. product_id)}))" "(defn update-pr [product_id pr_name]\\r\\n  (mc/update db \\"products\\" {\:_id (ObjectId. product_id)} {\:name pr_name}))" "(update-pr \\"55ff48a22a23aed7c91dd6ec\\" \\"jok\\")" "(defn search-product [product-id]\\r\\n  (mc/find-one-as-map db \\"products\\" {\:_id (ObjectId. product-id)}))" "(search-product \\"560577d70be551dd922bd270\\")" "(defn return-products-by-id [product-id]\\r\\n   (create-root-element(db/search-product product-id)))" "(return-products-by-id \\"560577d70be551dd922bd270\\")" "(defn my-plot [x y]\\r\\n  (function-plot sin x y))" "(my-plot -10 10)" "(defn sav [] \\r\\n  (save my-plot \\"plot1.png\\"))" "(sav)" "( sav )" "(defn my-plot [x y]\\r\\n  (function-plot sin x y))" "(my-plot -10 10)" "(defn sav [nameOfpic] \\r\\n  (save my-plot nameOfpic))" "sav" "(sav \\"proba1.png\\")" "(defn my-plot [x y]\\r\\n  (function-plot sin x y))" "(defn sav [nameOfpic] \\r\\n  (save (my-plot -10 10) nameOfpic))" "(sav \\"proba89.png\\")" "(defn my-plot [x y]\\r\\n  (function-plot sin x y))" "(defn viewPlot []\\r\\n  (view (my-plot -10 10)))" "(viewPlot)" "(defn plotPriceExrate [] \\r\\n  (plot-model carPrice carMileage))" "(plotPriceExrate)" "(defn deleteProductsFile []\\r\\n  (io/delete-file \\"resources/public/img/proba35.png\\"))" "(deleteProductsFile)" "(defn plotPriceExrate [nameOfPic] \\r\\n  (plot-model productPrice productExRate nameOfPic)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate \\"resources/public/img/proba35.png\\")" "(plotPriceExrate \\"proba35.png\\")" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate))" "(plotPriceExrate)" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate))" "(plotPriceExrate)" "(defn viewPlot []\\r\\n  (view (my-plot -10 10)))" "(viewPlot)" "(defn sav [nameOfpic] \\r\\n  (save (my-plot -10 10) nameOfpic)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(sav \\"proba11\\")" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate))" "(plotPriceExrate)" "(def productDataSet\\r\\n  (let [columns [\:_id \:name \:description \:year \:price \:exrate \:priceeur]\\r\\n    headers  (map name columns)\\r\\n    result (db/read-all-products)\\r\\n    rows  (mapv \#(mapv % columns) result)]\\r\\n     print rows))" "(productDataSet)" "(def productPrice (sel productDataSet \:cols 4))\\r\\n(def productExRate (sel productDataSet \:cols 5))" "(defn plot-model [X Y] (view\\r\\n  (icharts/add-lines (make-scatter-plot-chart X Y)  \\r\\n     X (\:fitted (ols-linear-model Y X)))))" "(plot-model productPrice productExRate)" "\\r\\n(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(defn productPrice [] (sel productDataSet \:cols 4))" "(productPrice)" "(defn productPricee [] (sel productDataSet \:cols 5))" "(productPricee)" "(defn make-scatter-plot-chart [X Y]\\r\\n  (icharts/scatter-plot X Y))" "(make-scatter-plot-chart (2000 2500) (0.697257 0.74774))" "(defn ols-linear-model [Y X]\\r\\n  (linear-model Y X))" "(ols-linear-model (0.697257 0.74774) (2000 2500))" "(defn plot-model [X Y] (view\\r\\n  (icharts/add-lines (make-scatter-plot-chart X Y)  \\r\\n     X (\:fitted (ols-linear-model Y X)))))" "(plot-model (0.697257 0.74774) (2000 2500))" "(plot-model (1 2) (2000 2500))" "(plot-model \\"(0.697257 0.74774)\\" \\"(2000 2500)\\")" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(def productPrice (sel productDataSet \:cols 4))\\r\\n(def productExRate (sel productDataSet \:cols 3))" "(plotPriceExrate)" "(def productDataSet\\r\\n  (let [columns [\:_id \:name \:description \:year \:price \:exrate \:priceeur]\\r\\n    headers  (map name columns)\\r\\n    result (db/read-all-products)\\r\\n    rows  (mapv \#(mapv % columns) result)]\\r\\n     print rows))" "productDataSet" "(def productDataSet\\r\\n  (let [columns [\:_id \:name \:description \:year \:price \:exrate \:priceeur]\\r\\n    headers  (map name columns)\\r\\n    result (db/read-all-products)\\r\\n    rows  (mapv \#(mapv % columns) result)]\\r\\n     print rows))" "productDataSet \:cols" "productDataSet \:cols 5" "(def productPrice (sel productDataSet \:cols 4))" "productPrice" "(def productPrice (sel productDataSet \:cols 4))\\r\\n(def productExRate (sel productDataSet \:cols 5))" "productPrice" "productExRate" "(defn plot-model [X Y] (view\\r\\n  (icharts/add-lines (make-scatter-plot-chart X Y)  \\r\\n     X (\:fitted (ols-linear-model Y X)))))" "(defn ols-linear-model [Y X]\\r\\n  (linear-model Y X))\\r\\n\\r\\n(defn make-scatter-plot-chart [X Y]\\r\\n  (icharts/scatter-plot X Y))\\t\\t\\t\\r\\n\\r\\n(defn plot-model [X Y] (view\\r\\n  (icharts/add-lines (make-scatter-plot-chart X Y)  \\r\\n     X (\:fitted (ols-linear-model Y X)))))" "plot-model" "(plot-model productPrice productExRate)" "(def productDataSet\\r\\n  (let [columns [\:_id \:name \:description \:year \:price \:exrate \:priceeur]\\r\\n    headers  (map name columns)\\r\\n    result (db/read-all-products)\\r\\n    rows  (mapv \#(mapv % columns) result)]\\r\\n     print rows))\\r\\n\\r\\n\\r\\n\\r\\n(def productPrice (sel productDataSet \:cols 4))\\r\\n(def productExRate (sel productDataSet \:cols 5))" "productPrice" "productExRate" "(defn ols-linear-model [Y X]\\r\\n  (linear-model Y X))\\r\\n\\r\\n(defn make-scatter-plot-chart [X Y]\\r\\n  (icharts/scatter-plot X Y))\\t\\t\\t\\r\\n\\r\\n(defn plot-model [X Y] (view\\r\\n  (icharts/add-lines (make-scatter-plot-chart X Y)  \\r\\n     X (\:fitted (ols-linear-model Y X)))))" "(plot-model productPrice productExRate)" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)" "(def productDataSet\\r\\n  (let [columns [\:_id \:name \:description \:year \:price \:exrate \:priceeur]\\r\\n    headers  (map name columns)\\r\\n    result (db/read-all-products)\\r\\n    rows  (mapv \#(mapv % columns) result)]\\r\\n     print rows))\\r\\n\\r\\n\\r\\n\\r\\n(def productPrice (sel productDataSet \:cols 4))\\r\\n(def productExRate (sel productDataSet \:cols 5))\\r\\n\\r\\n(defn ols-linear-model [Y X]\\r\\n  (linear-model Y X))\\r\\n\\r\\n(defn make-scatter-plot-chart [X Y]\\r\\n  (icharts/scatter-plot X Y \\r\\n \:title \\"Relationship of Product's price and Exchange rate\\"\\r\\n \:x-label \\"Product's price\\"\\r\\n \:y-label \\"Exchange rate\\"\\r\\n \:legend false))\\t\\t\\t\\r\\n\\r\\n(defn plot-model [X Y] (view\\r\\n  (icharts/add-lines (make-scatter-plot-chart X Y)  \\r\\n     X (\:fitted (ols-linear-model Y X)))))\\r\\n\\r\\n(defn plotPriceExrate [] \\r\\n  (plot-model productPrice productExRate)\\r\\n  (redirect \\"/products\#productsPlot\\"))" "(plotPriceExrate)"]
eclipse.preferences.version=1
